"use client";
import { useState } from "react";

export default function AdminPage() {
  const [testName, setTestName] = useState("testul1");
  const [questions, setQuestions] = useState([]);

  const handleAddQuestion = () => {
    setQuestions([
      ...questions,
      {
        text: "",
        options: ["", "", "", ""],
        correct: 0,
        explanation: "",
        image: null,
        explanationImage: null,
      },
    ]);
  };

  const handleUpdateQuestion = (index, field, value) => {
    const updated = [...questions];
    updated[index][field] = value;
    setQuestions(updated);
  };

  const handleUpdateOption = (qIndex, optIndex, value) => {
    const updated = [...questions];
    updated[qIndex].options[optIndex] = value;
    setQuestions(updated);
  };

  const handleDelete = (index) => {
    const updated = [...questions];
    updated.splice(index, 1);
    setQuestions(updated);
  };

  const handleExport = () => {
    const json = JSON.stringify(questions, null, 2);
    const blob = new Blob([json], { type: "application/json" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = `${testName}.json`;
    a.click();
  };

  const handleImport = (e) => {
    const file = e.target.files[0];
    if (!file) return;
    const reader = new FileReader();
    reader.onload = (event) => {
      const content = JSON.parse(event.target.result);
      setQuestions(content);
    };
    reader.readAsText(file);
  };

  const handleImageChange = (index, field, file) => {
    const reader = new FileReader();
    reader.onload = () => {
      const updated = [...questions];
      updated[index][field] = reader.result;
      setQuestions(updated);
    };
    reader.readAsDataURL(file);
  };

  return (
    <div style={{ padding: "2rem", maxWidth: "800px", margin: "auto" }}>
      <h1 style={{ fontSize: "24px", fontWeight: "bold", marginBottom: "1rem" }}>
        Admin - Creare Test
      </h1>

      <label style={{ fontWeight: "bold" }}>Nume test (fără spații):</label>
      <input
        value={testName}
        onChange={(e) => setTestName(e.target.value)}
        style={{
          display: "block",
          marginBottom: "1.5rem",
          border: "1px solid black",
          padding: "6px",
          width: "100%",
        }}
      />

      <button
        onClick={handleAddQuestion}
        style={{
          padding: "6px 12px",
          fontSize: "14px",
          backgroundColor: "#0070f3",
          color: "white",
          border: "none",
          borderRadius: "4px",
          cursor: "pointer",
        }}
      >
        + Adaugă întrebare
      </button>

      <input
        type="file"
        accept=".json"
        onChange={handleImport}
        style={{
          marginLeft: "1rem",
          padding: "6px",
          fontSize: "14px",
          border: "1px solid #ccc",
        }}
      />

      <button
        onClick={handleExport}
        style={{
          marginLeft: "1rem",
          padding: "6px 12px",
          fontSize: "14px",
          backgroundColor: "#0070f3",
          color: "white",
          border: "none",
          borderRadius: "4px",
          cursor: "pointer",
        }}
      >
        Exportă test
      </button>

      {questions.map((q, index) => (
        <div
          key={index}
          style={{
            border: "2px solid #0070f3",
            padding: "1rem",
            marginTop: "1.5rem",
            borderRadius: "8px",
            background: "#f9fafe",
          }}
        >
          <label style={{ fontWeight: "bold" }}>
            Enunț întrebare {index + 1}:
          </label>
          <textarea
            value={q.text}
            onChange={(e) => handleUpdateQuestion(index, "text", e.target.value)}
            style={{
              width: "100%",
              border: "1px solid black",
              marginBottom: "1rem",
              padding: "6px",
            }}
          />

          <label style={{ fontWeight: "bold" }}>Imagine întrebare:</label>
          <input
            type="file"
            accept="image/*"
            onChange={(e) =>
              handleImageChange(index, "image", e.target.files[0])
            }
            style={{ marginBottom: "1rem", display: "block" }}
          />
          {q.image && (
            <div style={{ textAlign: "center", marginBottom: "1rem" }}>
              <img src={q.image} alt="Întrebare" style={{ maxWidth: "100%" }} />
            </div>
          )}

          <label style={{ fontWeight: "bold" }}>Variante de răspuns:</label>
          {q.options.map((opt, i) => (
            <div key={i} style={{ marginBottom: "0.5rem" }}>
              <input
                value={opt}
                onChange={(e) => handleUpdateOption(index, i, e.target.value)}
                style={{
                  width: "80%",
                  border: "1px solid black",
                  padding: "4px",
                  marginRight: "1rem",
                }}
              />
              <input
                type="radio"
                checked={q.correct === i}
                onChange={() => handleUpdateQuestion(index, "correct", i)}
              />
            </div>
          ))}

          <label style={{ fontWeight: "bold" }}>Explicație:</label>
          <textarea
            value={q.explanation}
            onChange={(e) =>
              handleUpdateQuestion(index, "explanation", e.target.value)
            }
            style={{
              width: "100%",
              border: "1px solid black",
              marginBottom: "1rem",
              padding: "6px",
            }}
          />

          <label style={{ fontWeight: "bold" }}>Imagine explicație:</label>
          <input
            type="file"
            accept="image/*"
            onChange={(e) =>
              handleImageChange(index, "explanationImage", e.target.files[0])
            }
            style={{ marginBottom: "1rem", display: "block" }}
          />
          {q.explanationImage && (
            <div style={{ textAlign: "center", marginBottom: "1rem" }}>
              <img
                src={q.explanationImage}
                alt="Explicație"
                style={{ maxWidth: "100%" }}
              />
            </div>
          )}

          <button
            onClick={() => handleDelete(index)}
            style={{ color: "red", marginTop: "0.5rem" }}
          >
            Șterge întrebarea
          </button>
        </div>
      ))}
    </div>
  );
}
